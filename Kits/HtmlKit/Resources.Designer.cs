//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HtmlKit {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("HtmlKit.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .tabs {
        ///  display: flex;
        ///  flex-wrap: wrap;
        ///  border-bottom: 1px solid #ccc;
        ///}
        ///.tab-button {
        ///  padding: 10px 20px;
        ///  cursor: pointer;
        ///  background-color: #f1f1f1;
        ///  border: 1px solid #ccc;
        ///  border-bottom: none;
        ///  border-radius: 5px 5px 0 0;
        ///  margin-right: 5px;
        ///}
        ///.tab-button.active {
        ///  background-color: #fff;
        ///  border-color: #ccc;
        ///  border-bottom: 1px solid #fff;
        ///}
        ///.tab-content {
        ///  display: none;
        ///  padding: 20px;
        ///  border: 1px solid #ccc;
        ///  border-top: none;
        ///  overflow-x: auto;
        ///  overflow-y: auto;
        ///}
        ///.tab-c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CssTabsheetTabs {
            get {
                return ResourceManager.GetString("CssTabsheetTabs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to :root {
        ///  --link-color: #0077cc;
        ///  --cell-border-color: #cccccc;
        ///  --cell-border-color-dark: #c0c0c0;
        ///  --border-summary: #f3f3f3;
        ///  --border-metadata: #f3f3f3;
        ///
        ///  --hover-background-light: #f0f0f0;
        ///  --hover-background-dark: #e0e0e0;
        ///
        ///  --cell-padding: 6px 10px;
        ///  --alt-cell-padding: 1px 1px; 
        ///
        ///  --link-text-decoration: none;
        ///  --link-text-align: inherit;
        ///  --link-color-inherit: inherit;
        ///  --link-white-space: nowrap;
        ///  --link-overflow: hidden;
        ///  --link-text-overflow: ellipsis;
        ///}
        ///
        ////* Вс [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HtmlProducerContentStyle {
            get {
                return ResourceManager.GetString("HtmlProducerContentStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to document.addEventListener(&apos;DOMContentLoaded&apos;, () =&gt; {
        /// const table = document.querySelector(&apos;table&apos;);
        /// const rows = Array.from(table.rows);
        ///
        /// rows.forEach(row =&gt; {
        ///  Array.from(row.cells).forEach((cell, colIndex) =&gt; {
        ///   cell.addEventListener(&apos;mouseenter&apos;, () =&gt; {
        ///    rows.forEach(r =&gt; {
        ///     if (r.cells[colIndex])
        ///      r.cells[colIndex].classList.add(&apos;hover-col&apos;);
        ///    });
        ///    cell.classList.add(&apos;hover-cell&apos;);
        ///   });
        ///
        ///   cell.addEventListener(&apos;mouseleave&apos;, () =&gt; {
        ///    rows.forEach(r =&gt; {
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HtmlProducerContentStyleScript {
            get {
                return ResourceManager.GetString("HtmlProducerContentStyleScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function showTab(tabId, clickedButton) {
        ///            document.querySelectorAll(&quot;.tab-content&quot;).forEach(content =&gt; {
        ///                content.classList.remove(&quot;active&quot;);
        ///            });
        ///
        ///            document.querySelectorAll(&quot;.tab-button&quot;).forEach(button =&gt; {
        ///                button.classList.remove(&quot;active&quot;);
        ///            });
        ///
        ///            document.getElementById(tabId).classList.add(&quot;active&quot;);
        ///            clickedButton.classList.add(&quot;active&quot;);
        ///        }.
        /// </summary>
        internal static string JsShowTabseetTabScript {
            get {
                return ResourceManager.GetString("JsShowTabseetTabScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (function shrinkEmbeddedFonts() {
        ///    const tables = document.querySelectorAll(&quot;.embedded-table&quot;);
        ///    tables.forEach(table =&gt; {
        ///        const cells = table.querySelectorAll(&quot;td&quot;);
        ///        let fontSize = 0.65;
        ///
        ///        const testFits = () =&gt; {
        ///            return [...cells].every(cell =&gt; {
        ///                const clone = cell.cloneNode(true);
        ///                clone.style.position = &quot;absolute&quot;;
        ///                clone.style.visibility = &quot;hidden&quot;;
        ///                clone.style.whiteSpace = &quot;nowrap&quot;;
        ///      [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ScriptAutoFontShrink {
            get {
                return ResourceManager.GetString("ScriptAutoFontShrink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function autoResizeEmbeddedTables() {
        ///    const tables = document.querySelectorAll(&quot;.embedded-table&quot;);
        ///    tables.forEach(table =&gt; {
        ///        let size = 0.7;
        ///        const min = 0.4;
        ///
        ///        while (size &gt;= min) {
        ///            table.style.fontSize = `${size}em`;
        ///            const fits = [...table.querySelectorAll(&quot;td&quot;)].every(cell =&gt;
        ///                cell.scrollWidth &lt;= cell.offsetWidth
        ///            );
        ///            if (fits) break;
        ///            size -= 0.05;
        ///        }
        ///    });
        ///}
        ///
        ///document.addEvent [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ScriptAutoShrinkEmbeddedTable {
            get {
                return ResourceManager.GetString("ScriptAutoShrinkEmbeddedTable", resourceCulture);
            }
        }
    }
}
